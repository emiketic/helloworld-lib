{"version":3,"sources":["../../src/common/intl.test.js"],"names":["require","defineLocale","$intl","default","fr","timeZone","currency","current","setTranslations","test","input","output","$t","expect","replace","toEqual","number","Date","UTC","date","toBe","time"],"mappings":";;AAAA;eAEyCA,OAAO,CAAC,QAAD,C;IAAxCC,Y,YAAAA,Y;IAAuBC,K,YAATC,O;;AAEtBD,KAAK,CAACE,EAAN,GAAWH,YAAY,CAAC,IAAD,EAAO;AAC5BI,EAAAA,QAAQ,EAAE,cADkB;AAE5BC,EAAAA,QAAQ,EAAE;AAFkB,CAAP,CAAvB;AAKAJ,KAAK,CAACK,OAAN,GAAgBL,KAAK,CAACE,EAAtB;AAEAF,KAAK,CAACK,OAAN,CAAcC,eAAd,CAA8B;AAC5B,iBAAe;AADa,CAA9B;AAIAC,IAAI,CAAC,kBAAD,EAAqB,YAAM;AAAA;;AAC7B,MAAMC,KAAK,GAAG,CAAC,aAAD,EAAgB,OAAhB,CAAd;;AACA,MAAMC,MAAM,GAAG,kBAAAT,KAAK,CAACK,OAAN,EAAcK,EAAd,uBAAoBF,KAApB,CAAf;;AACAG,EAAAA,MAAM,CAACF,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,GAAvB,CAAD,CAAN,CAAoCC,OAApC,CAA4C,gBAA5C;AACD,CAJG,CAAJ;AAMAN,IAAI,CAAC,sBAAD,EAAyB,YAAM;AACjC,MAAMC,KAAK,GAAG,UAAd;AACA,MAAMC,MAAM,GAAGT,KAAK,CAACK,OAAN,CAAcS,MAAd,CAAqBN,KAArB,CAAf;AACAG,EAAAA,MAAM,CAACF,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,GAAvB,CAAD,CAAN,CAAoCC,OAApC,CAA4C,aAA5C;AACD,CAJG,CAAJ;AAMAN,IAAI,CAAC,wBAAD,EAA2B,YAAM;AACnC,MAAMC,KAAK,GAAG,UAAd;AACA,MAAMC,MAAM,GAAGT,KAAK,CAACK,OAAN,CAAcD,QAAd,CAAuBI,KAAvB,CAAf;AACAG,EAAAA,MAAM,CAACF,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,GAAvB,CAAD,CAAN,CAAoCC,OAApC,CAA4C,cAA5C;AACD,CAJG,CAAJ;AAMAN,IAAI,CAAC,oBAAD,EAAuB,YAAM;AAC/B,MAAMC,KAAK,GAAG,IAAIO,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAd;AACA,MAAMP,MAAM,GAAGT,KAAK,CAACK,OAAN,CAAcY,IAAd,CAAmBT,KAAnB,CAAf;AACAG,EAAAA,MAAM,CAACF,MAAD,CAAN,CAAeS,IAAf,CAAoB,YAApB;AACD,CAJG,CAAJ;AAMAX,IAAI,CAAC,oBAAD,EAAuB,YAAM;AAC/B,MAAMC,KAAK,GAAG,IAAIO,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAd;AACA,MAAMP,MAAM,GAAGT,KAAK,CAACK,OAAN,CAAcc,IAAd,CAAmBX,KAAnB,CAAf;AACAG,EAAAA,MAAM,CAACF,MAAD,CAAN,CAAeS,IAAf,CAAoB,OAApB;AACD,CAJG,CAAJ","sourcesContent":["/* eslint-env jest */\n\nconst { defineLocale, default: $intl } = require('./intl');\n\n$intl.fr = defineLocale('fr', {\n  timeZone: 'Europe/Paris',\n  currency: 'EUR',\n});\n\n$intl.current = $intl.fr;\n\n$intl.current.setTranslations({\n  'Welcome %{}': 'Bienvenu %{}',\n});\n\ntest('$intl.current.$t', () => {\n  const input = ['Welcome %{}', 'World'];\n  const output = $intl.current.$t(...input);\n  expect(output.replace(/\\s/gi, ' ')).toEqual('Bienvenu World');\n});\n\ntest('$intl.current.number', () => {\n  const input = 123456.789;\n  const output = $intl.current.number(input);\n  expect(output.replace(/\\s/gi, ' ')).toEqual('123 456,789');\n});\n\ntest('$intl.current.currency', () => {\n  const input = 123456.789;\n  const output = $intl.current.currency(input);\n  expect(output.replace(/\\s/gi, ' ')).toEqual('123 456,79 â‚¬');\n});\n\ntest('$intl.current.date', () => {\n  const input = new Date(Date.UTC(2000, 1, 1, 1, 1, 1));\n  const output = $intl.current.date(input);\n  expect(output).toBe('01/02/2000');\n});\n\ntest('$intl.current.time', () => {\n  const input = new Date(Date.UTC(2000, 1, 1, 1, 1, 1));\n  const output = $intl.current.time(input);\n  expect(output).toBe('02:01');\n});\n"],"file":"intl.test.js"}