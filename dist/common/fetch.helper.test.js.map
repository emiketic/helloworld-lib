{"version":3,"sources":["../../src/common/fetch.helper.test.js"],"names":["FetchHelper","require","ORIGIN_REGEXP","ENDPOINT","process","env","FETCH_HELPER_TEST_ENDPOINT","test","input","output","toQueryString","expect","toBe","undefined","null","boolean1","boolean2","number1","number2","number3","string1","string2","date","Date","array","object","request","Request","url","route","userId","body","name","method","headers","get","_bodyText","JSON","stringify","toFormData","_bodyInit","toBeInstanceOf","FormData","query","meta","fields","done","fetch","then","ResponseHandler","ErrorHandler","result","origin","toMatch","catch","error","code","message","extra","text","response","ErrorValueHandler","a","b","args","toEqual","form","token","json"],"mappings":"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","sourcesContent":["const FetchHelper = require('./fetch.helper');\n\n/* eslint-env jest */\n\nconst ORIGIN_REGEXP = /^\\d+\\.\\d+\\.\\d+\\.\\d+/;\n\nconst ENDPOINT = process.env.FETCH_HELPER_TEST_ENDPOINT || 'https://httpbin.org';\n\ntest('FetchHelper.toQueryString with empty payload', () => {\n  const input = {};\n\n  const output = FetchHelper.toQueryString(input);\n\n  expect(output).toBe('');\n});\n\ntest('FetchHelper.toQueryString with flat payload', () => {\n  const input = {\n    undefined: undefined,\n    null: null,\n    boolean1: false,\n    boolean2: true,\n    number1: 0,\n    number2: 1,\n    number3: -1,\n    string1: 'hello',\n    string2: 'world',\n    date: new Date('2018-01-01T00:00:00.000Z'),\n  };\n\n  const output = FetchHelper.toQueryString(input);\n\n  expect(output).toBe(\n    'undefined=&null=null&boolean1=false&boolean2=true&number1=0&number2=1&number3=-1&string1=hello&string2=world&date=2018-01-01T00:00:00.000Z',\n  );\n});\n\ntest('FetchHelper.toQueryString with nested payload', () => {\n  const input = {\n    array: [null, false, true, 0, 1, -1, 'hello', 'world', new Date('2018-01-01T00:00:00.000Z')],\n    object: {\n      null: null,\n      boolean1: false,\n      boolean2: true,\n      number1: 0,\n      number2: 1,\n      number3: -1,\n      string1: 'hello',\n      string2: 'world',\n      date: new Date('2018-01-01T00:00:00.000Z'),\n    },\n  };\n\n  const output = FetchHelper.toQueryString(input);\n\n  expect(output).toBe(\n    'array[0]=null&array[1]=false&array[2]=true&array[3]=0&array[4]=1&array[5]=-1&array[6]=hello&array[7]=world&array[8]=2018-01-01T00:00:00.000Z&object[null]=null&object[boolean1]=false&object[boolean2]=true&object[number1]=0&object[number2]=1&object[number3]=-1&object[string1]=hello&object[string2]=world&object[date]=2018-01-01T00:00:00.000Z',\n  );\n});\n\n// test('FetchHelper.toQueryString with realistic payload', () => {\n//   const file = null; // @TODO simulate file\n\n//   const query = FetchHelper.toQueryString({\n//     array: [\n//       null,\n//       false,\n//       0,\n//       'hello',\n//       new Date(),\n//       {\n//         photo: file || null,\n//         legend: 'legend...',\n//       },\n//     ],\n//     object: {\n//       null: null,\n//       boolean: false,\n//       number: 0,\n//       string: 'hello',\n//       date: new Date(),\n//       attachement: {\n//         photo: file || null,\n//         legend: 'legend...',\n//       },\n//     },\n//   });\n\n//   expect(query).toBe('');\n// });\n\ntest('FetchHelper.Request', () => {\n  const request = FetchHelper.Request('GET', '/user/:userId/profile');\n\n  expect(request.url).toBe('/user/:userId/profile');\n});\n\ntest('FetchHelper.Request with route params', () => {\n  const request = FetchHelper.Request('GET', '/user/:userId/profile', {\n    route: { userId: '123456789' },\n  });\n\n  expect(request.url).toBe('/user/123456789/profile');\n});\n\ntest('FetchHelper.Request with plain object body', () => {\n  const body = {\n    name: 'John',\n  };\n\n  const request = FetchHelper.Request('POST', '/user/:userId/profile', {\n    body,\n  });\n\n  expect(request.method).toBe('POST');\n\n  expect(request.url).toBe('/user/:userId/profile');\n\n  expect(request.headers.get('Content-Type')).toBe('application/json');\n\n  expect(request._bodyText).toBe(JSON.stringify(body));\n});\n\ntest('FetchHelper.Request with FormData body', () => {\n  const body = {\n    name: 'John',\n  };\n\n  const request = FetchHelper.Request('POST', '/user/:userId/profile', {\n    body: FetchHelper.toFormData(body),\n  });\n\n  expect(request.method).toBe('POST');\n\n  expect(request.url).toBe('/user/:userId/profile');\n\n  expect(request._bodyInit).toBeInstanceOf(FormData);\n});\n\ntest('FetchHelper.Request with route and query params', () => {\n  const request = FetchHelper.Request('GET', '/user/:userId/profile', {\n    route: { userId: '123456789' },\n    query: { meta: { fields: ['name', 'email', 'picture'] } },\n  });\n\n  expect(request.method).toBe('GET');\n\n  expect(request.url).toBe(\n    '/user/123456789/profile?meta[fields][0]=name&meta[fields][1]=email&meta[fields][2]=picture',\n  );\n});\n\n/**\n * FetchHelper documentation examples\n */\n\ntest('FetchHelper Promise success example', (done) => {\n  fetch(`${ENDPOINT}/anything`)\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .then((result) => {\n      expect(result.origin).toMatch(ORIGIN_REGEXP);\n      done();\n    })\n    .catch((error) => done(error));\n});\n\ntest('FetchHelper Promise failure example', (done) => {\n  fetch(`${ENDPOINT}/status/400`)\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .catch((error) => {\n      expect(error.code).toBe('Invalid');\n      expect(error.message).toBe('Invalid request');\n      expect(error.extra.text).toBe('');\n      done();\n    });\n});\n\ntest('FetchHelper Promise failure example', (done) => {\n  fetch(`${ENDPOINT}/status/401`)\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .catch((error) => {\n      expect(error.code).toBe('Unauthenticated');\n      expect(error.message).toBe('Unauthenticated');\n      // expect(error.extra.text).toBe(''); // @TODO fix\n      done();\n    });\n});\n\ntest('FetchHelper Promise failure example', (done) => {\n  fetch(`${ENDPOINT}/status/403`)\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .catch((error) => {\n      expect(error.code).toBe('Unauthorized');\n      expect(error.message).toBe('Unauthorized');\n      expect(error.extra.text).toBe('');\n      done();\n    });\n});\n\ntest('FetchHelper Promise failure example', (done) => {\n  fetch(`${ENDPOINT}/status/404`)\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .catch((error) => {\n      expect(error.code).toBe('NotFound');\n      expect(error.message).toBe('Not found');\n      expect(error.extra.text).toBe('');\n      done();\n    });\n});\n\ntest('FetchHelper Promise failure example', (done) => {\n  fetch(`${ENDPOINT}/status/410`)\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .catch((error) => {\n      expect(error.code).toBe('Unknown');\n      expect(error.message).toBe('Unknown error');\n      expect(error.extra.text).toBe('');\n      done();\n    });\n});\n\ntest('FetchHelper Promise failure example', (done) => {\n  fetch(`${ENDPOINT}/status/500`)\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .catch((error) => {\n      expect(error.code).toBe('Server');\n      expect(error.message).toBe('Server error');\n      expect(error.extra.text).toBe('');\n      done();\n    });\n});\n\ntest('FetchHelper async/await success example', async () => {\n  try {\n    const response = await fetch(`${ENDPOINT}/anything`);\n    const result = await FetchHelper.ResponseHandler(response);\n\n    expect(result.origin).toMatch(ORIGIN_REGEXP);\n  } catch (error) {\n    error = FetchHelper.ErrorValueHandler(error);\n\n    throw error;\n  }\n});\n\ntest('FetchHelper async/await failure example', async () => {\n  try {\n    const response = await fetch(`${ENDPOINT}/status/400`);\n    const result = await FetchHelper.ResponseHandler(response);\n  } catch (error) {\n    error = FetchHelper.ErrorValueHandler(error);\n\n    expect(error.code).toBe('Invalid');\n    expect(error.message).toBe('Invalid request');\n    expect(error.extra.text).toBe('');\n  }\n});\n\ntest('FetchHelper.toQueryString example', (done) => {\n  fetch(`${ENDPOINT}/anything?${FetchHelper.toQueryString({ a: 1, b: 2 })}`)\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .then((result) => {\n      expect(result.origin).toMatch(ORIGIN_REGEXP);\n      expect(result.args).toEqual({ a: '1', b: '2' });\n      done();\n    })\n    .catch((error) => done(error));\n});\n\ntest('FetchHelper.toFormData example', (done) => {\n  fetch(`${ENDPOINT}/anything`, {\n    method: 'POST',\n    body: FetchHelper.toFormData({ a: 1, b: 2 }),\n  })\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .then((result) => {\n      expect(result.origin).toMatch(ORIGIN_REGEXP);\n      expect(result.form).toEqual({ a: '1', b: '2' });\n      done();\n    })\n    .catch((error) => done(error));\n});\n\ntest('FetchHelper.Request example', (done) => {\n  fetch(\n    FetchHelper.Request('POST', `${ENDPOINT}/anything/:token`, {\n      route: { token: '123456789' },\n      query: { a: 1, b: 2 },\n      body: { a: 1, b: 2 },\n    }),\n  )\n    .then(FetchHelper.ResponseHandler, FetchHelper.ErrorHandler)\n    .then((result) => {\n      expect(result.origin).toMatch(ORIGIN_REGEXP);\n      expect(result.url).toBe(`${ENDPOINT}/anything/123456789?a=1&b=2`);\n      expect(result.args).toEqual({ a: '1', b: '2' });\n      expect(result.json).toEqual({ a: 1, b: 2 });\n      done();\n    })\n    .catch((error) => done(error));\n});\n"],"file":"fetch.helper.test.js"}